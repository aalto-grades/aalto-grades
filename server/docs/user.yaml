# SPDX-FileCopyrightText: 2023 The Aalto Grades Developers
#
# SPDX-License-Identifier: MIT
---
definitions:
  # Smaller units
  UserId:
    type: integer
    format: int32
    description: Internal user database ID.
    minimum: 1
    example: 1

  UserName:
    type: string
    description: User's name.
    example: John Doe
  NullableUserName:
    type: string
    nullable: true
    description: User's name.
    example: John Doe

  UserEmail:
    type: string
    description: User's email address.
    example: john.doe@aalto.fi
  NullableUserEmail:
    type: string
    nullable: true
    description: User's email address.
    example: john.doe@aalto.fi

  StudentNumber:
    type: string
    description: User's student number.
    example: 2683926
  NullableStudentNumber:
    type: string
    nullable: true
    description: User's student number.
    example: 2683926

  # Bigger schemas
  UserData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/NullableUserName'
      email:
        $ref: '#/definitions/NullableUserEmail'
      studentNumber:
        $ref: '#/definitions/NullableStudentNumber'
    required:
      - id
      - name
      - email
      - studentNumber

  FullUserData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/NullableUserName'
      email:
        $ref: '#/definitions/NullableUserEmail'
      studentNumber:
        $ref: '#/definitions/NullableStudentNumber'
      role:
        $ref: '#/definitions/SystemRole'
      idpUser:
        type: boolean
        description: If the user is an IDP user.
        example: true
    required:
      - id
      - name
      - email
      - studentNumber
      - role
      - idpUser

  StudentData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/NullableUserName'
      email:
        $ref: '#/definitions/NullableUserEmail'
      studentNumber:
        $ref: '#/definitions/StudentNumber'
    required:
      - id
      - name
      - email
      - studentNumber

  TeacherData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/NullableUserName'
      email:
        $ref: '#/definitions/UserEmail'
      studentNumber:
        $ref: '#/definitions/NullableStudentNumber'
    required:
      - id
      - name
      - email
      - studentNumber

  AssistantData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/NullableUserName'
      email:
        $ref: '#/definitions/UserEmail'
      studentNumber:
        $ref: '#/definitions/NullableStudentNumber'
      expiryDate:
        $ref: '#/definitions/NullableAssistantExpiryDate'
    required:
      - id
      - name
      - email
      - studentNumber
      - expiryDate

  # Actually a union
  NewUser:
    type: object
    properties:
      admin:
        type: boolean
        description: If the new user should be an admin.
        example: true
      email:
        $ref: '#/definitions/UserEmail'
      name:
        $ref: '#/definitions/UserName'
    required:
      - admin
      - email
      # - name

  NewUserResponse:
    type: object
    properties:
      temporaryPassword:
        $ref: '#/definitions/NullableTemporaryPassword'
    required:
      - temporaryPassword

  VerifyEmail:
    type: object
    properties:
      email:
        type: string
        description: Email to verify existence
        example: teacher@aalto.fi

  VerifyEmailResponse:
    type: object
    properties:
      exists:
        type: boolean
        description: If the email existed in the database
        example: true

/v1/users/own-courses:
  get:
    tags: [User]
    description: >
      Get all courses the requester has or is currently participating in.
    responses:
      200:
        description: Courses the requester is currently participating in.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/CourseData'
      401:
        $ref: '#/responses/Unauthorized'
    security:
      - cookieAuth: []

/v1/users/{userId}/courses:
  get:
    tags: [User]
    description: >
      Get all courses and final grades from the courses the user is currently participating in.
      Only returns the courses the requester has a teacher or assistant role in.
    responses:
      200:
        description: Courses and final grades of the user.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/CourseDataWithFinalGrades'
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/users/students:
  get:
    tags: [User]
    description: >
      Get all students from the courses the requester has a teacher or assistant role in.
      If the requester has an assistant role the names and emails
      of the students will be set to null.
    responses:
      200:
        description: All students from the courses the requester has a teacher or assistant role in.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/UserData'
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/users:
  get:
    tags: [User]
    description: Get list of all users. Available only to admin users.
    responses:
      200:
        description: User information.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/FullUserData'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
    security:
      - cookieAuth: []
  post:
    tags: [User]
    description: >
      Add admins or users that can login with aalto idp.
      Available only to admin users.
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/definitions/NewUser'
    responses:
      201:
        description: User Created.
        content:
          application/json:
            schema:
              $ref: '#/definitions/NewUserResponse'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
      409:
        $ref: '#/responses/Conflict'
    security:
      - cookieAuth: []

/v1/users/{userId}:
  delete:
    tags: [User]
    description: >
      delete an idp user or an admin user.
      Available only to admin users.
    parameters:
      - $ref: '#/parameters/userId'
    responses:
      200:
        description: User deleted.
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/users/delete:
  post:
    tags: [User]
    description: Delete multiple users at once.
    requestBody:
      content:
        application/json:
          schema:
            type: array
            description: List of user IDs to delete.
            items:
              $ref: '#/definitions/UserId'
    responses:
      200:
        description: Users deleted.
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/users/verify-email:
  post:
    tags: [User]
    description: Verify whether an email exists in the database
    requestBody:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/definitions/VerifyEmail'
    responses:
      200:
        description: Result to indicate whether the email exists or not.
        content:
          application/json:
            schema:
              $ref: '#/definitions/VerifyEmailResponse'
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []
