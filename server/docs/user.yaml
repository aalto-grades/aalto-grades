# SPDX-FileCopyrightText: 2023 The Aalto Grades Developers
#
# SPDX-License-Identifier: MIT
---

definitions:
  UserData:
    type: object
    description: User's personal information.
    properties:
      id:
        type: integer
        description: Internal user database ID.
        format: int32
        minimum: 1
        example: 1
      studentNumber:
        $ref: '#/definitions/StudentNumber'
      name:
        type: string
        description: User's name.
        example: Eddy Engineer
      email:
        type: string
        description: User's email address.
        example: Eddy.Engineer@aalto.fi
  IdpUser:
    type: object
    description: Minimal idp user information.
    properties:
      id:
        type: integer
        description: Internal user database ID.
        format: int32
        minimum: 1
        example: 1
      email:
        type: string
        description: User's email address.
        example: Eddy.Engineer@aalto.fi

/v1/user/{userId}/courses:
  get:
    tags: [User]
    description: >
      Get all courses the given user has or is currently participating in.
      Regular users can only access their own course list. Admin users can
      access the courses of any user.
    parameters:
      - $ref: '#/components/parameters/userId'
    responses:
      200:
        description: Courses the user has participated in.
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/definitions/CourseData'
      400:
        description: User ID validation failed. Must be positive integer.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Failure'
      401:
        $ref: '#/components/responses/AuthenticationError'
      403:
        $ref: '#/components/responses/AuthorizationError'
      404:
        description: A user with the given user ID was not found.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Failure'
    security:
      - cookieAuth: []

/v1/user/{userId}:
  get:
    tags: [User]
    description: >
      Get information of the user based on ID. Regular users can only access
      their own information. Admin users can access the information of any user.
    parameters:
      - $ref: '#/components/parameters/userId'
    responses:
      200:
        description: User information.
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/definitions/UserData'
      400:
        description: User ID validation failed. Must be positive integer.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Failure'
      401:
        $ref: '#/components/responses/AuthenticationError'
      403:
        $ref: '#/components/responses/AuthorizationError'
      404:
        description: A user with the given user ID was not found.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Failure'
    security:
      - cookieAuth: []

/v1/idp-users:
  get:
    tags: [User]
    description: >
      Get all users that can login with aalto idp. Only for admins
    parameters:
      - $ref: '#/components/parameters/userId'
    responses:
      200:
        description: User information.
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/definitions/UserData'
      401:
        $ref: '#/components/responses/AuthenticationError'
      403:
        $ref: '#/components/responses/AuthorizationError'
    security:
      - cookieAuth: []
  post:
    tags: [User]
    description: >
      Add users that can login with aalto idp. Only for admins
    requestBody:
    content:
      application/json:
        schema:
          type: object
          properties:
            email:
              type: string
              description: Email of the user to be added
              example: firstname.lastname@aalto.fi
    responses:
      201:
        description: User created.
        content:
          application/json:
            schema:
              type: object
      401:
        $ref: '#/components/responses/AuthenticationError'
      403:
        $ref: '#/components/responses/AuthorizationError'
    security:
      - cookieAuth: []

/v1/idp-users/{userId}:
  delete:
    tags: [User]
    description: >
      delete idp user. Only for admins
    parameters:
      - $ref: '#/components/parameters/userId'
    responses:
      200:
        description: Deleted.
        content:
          application/json:
            schema:
              type: object

      400:
        description: bad request
      401:
        $ref: '#/components/responses/AuthenticationError'
      403:
        $ref: '#/components/responses/AuthorizationError'
      404:
        description: user doesnt exist
    security:
      - cookieAuth: []
