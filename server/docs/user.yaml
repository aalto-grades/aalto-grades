# SPDX-FileCopyrightText: 2023 The Aalto Grades Developers
#
# SPDX-License-Identifier: MIT
---
definitions:
  UserId:
    type: integer
    description: Internal user database ID.
    format: int32
    minimum: 1
    example: 1

  UserEmail:
    type: string
    description: User's email address.
    example: john.doe@aalto.fi

  StudentNumber:
    type: string
    description: User's student number.
    example: 2683926

  UserData:
    type: object
    description: User's personal information.
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        type: string
        description: User's name.
        example: Eddy Engineer
      email:
        $ref: '#/definitions/UserEmail'
      studentNumber:
        $ref: '#/definitions/StudentNumber'
    required:
      - id

  UserWithEmail:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        type: string
        description: User's name.
        example: John Doe
      email:
        $ref: '#/definitions/UserEmail'
      studentNumber:
        type: string
        description: User's student number
        example: 1234567
    required:
      - id
      - email

  FullUserData:
    type: object
    description: User data with a couple of extra fields.
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        type: string
        description: User's name.
        example: Eddy Engineer
      email:
        $ref: '#/definitions/UserEmail'
      studentNumber:
        $ref: '#/definitions/StudentNumber'
      role:
        $ref: '#/definitions/SystemRole'
      idpUser:
        type: boolean
        description: If the user is an IDP user
        example: true
    required:
      - id
      - role
      - idpUser

  IdpUser:
    type: object
    properties:
      admin:
        type: boolean
        enum: [false]
        example: false
      email:
        $ref: '#/definitions/UserEmail'
    required:
      - admin
      - email
  AdminUser:
    type: object
    properties:
      admin:
        type: boolean
        enum: [true]
      email:
        $ref: '#/definitions/UserEmail'
      name:
        type: string
        description: User's name.
        example: Eddy Engineer
    required:
      - admin
      - email
      - name
  NewUser:
    oneOf:
      - $ref: '#/definitions/IdpUser'
      - $ref: '#/definitions/AdminUser'

/v1/user/courses:
  get:
    tags: [User]
    description: >
      Get all courses the requester has or is currently participating in.
    responses:
      200:
        description: Courses the requester has participated in.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/CourseData'
      401:
        $ref: '#/components/responses/Unauthorized'
    security:
      - cookieAuth: []

/v1/user/{userId}/grades:
  get:
    tags: [User]
    description: >
      Get all courses and final grades from the courses the user is currently participating in.
      Only returns the courses the requester has a teacher or assistant role in.
    responses:
      200:
        description: Courses and final grades of the user.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/CourseDataWithFinalGrades'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/students:
  get:
    tags: [User]
    description: >
      Get all students from the courses the requester has a teacher or assistant role in.
      If the requester has an assistant role the names and emails
      of the students will be set to null.
    responses:
      200:
        description: All students from the courses the requester has a teacher or assistant role in.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/UserData'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/users:
  get:
    tags: [User]
    description: Get list of all users. Available only to admin users.
    responses:
      200:
        description: User information.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/FullUserData'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
    security:
      - cookieAuth: []
  post:
    tags: [User]
    description: >
      Add admins or users that can login with aalto idp.
      Available only to admin users.
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/definitions/NewUser'
    responses:
      201:
        description: User created.
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      409:
        $ref: '#/components/responses/Conflict'
    security:
      - cookieAuth: []

/v1/users/{userId}:
  delete:
    tags: [User]
    description: >
      delete an idp user or an admin user.
      Available only to admin users.
    parameters:
      - $ref: '#/components/parameters/userId'
    responses:
      200:
        description: User deleted.
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []
