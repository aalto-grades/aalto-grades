# SPDX-FileCopyrightText: 2023 The Ossi Developers
#
# SPDX-License-Identifier: MIT
---
definitions:
  # Smaller units
  SystemRole:
    type: string
    enum: [USER, ADMIN]
    description: The role of the user. Used for system level authorization.
    example: USER
  Password:
    type: string
    format: password
    description: Plaintext password.
    example: MySuperSecretPassword123

  OTP:
    type: string
    description: TOTP token.
    example: '523801'
  NullableOTP:
    type: string
    nullable: true
    description: TOTP token.
    example: '523801'

  OTPAuth:
    type: string
    description: TOTP secret.
    example: "otpauth://totp/Aalto%20Grades:admin%40aalto.fi?secret=SECRET\
      &period=30&digits=6&algorithm=SHA512&issuer=Aalto%20Grades"
  NullableOTPAuth:
    type: string
    nullable: true
    description: TOTP secret.
    example: "otpauth://totp/Aalto%20Grades:admin%40aalto.fi?secret=SECRET\
      &period=30&digits=6&algorithm=SHA512&issuer=Aalto%20Grades"

  TemporaryPassword:
    type: string
    format: password
    description: Temporary password.
    example: 6NsVuS34z2cNy1K3
  NullableTemporaryPassword:
    type: string
    format: password
    nullable: true
    description: Temporary password.
    example: 6NsVuS34z2cNy1K3

  ResetPassword:
    type: boolean
    description: If user password should be reset.
    example: true
  ResetMfa:
    type: boolean
    description: If user MFA should be reset.
    example: false

  # Bigger schemas
  AuthData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/UserName'
      role:
        $ref: '#/definitions/SystemRole'
    required:
      - id
      - name
      - role

  LoginData:
    type: object
    properties:
      email:
        $ref: '#/definitions/UserEmail'
      password:
        $ref: '#/definitions/Password'
      otp:
        $ref: '#/definitions/NullableOTP'
    required:
      - email
      - password
      - otp

  # Actually a union
  LoginResult:
    type: object
    properties:
      status:
        type: string
        enum: [resetPassword, showMfa, enterMfa, ok]
        description: A+ grade source type.
        example: ok
      otpAuth:
        $ref: '#/definitions/OTPAuth'
      otp:
        $ref: '#/definitions/NullableOTP'
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/UserName'
      role:
        $ref: '#/definitions/SystemRole'
    required:
      - status

  ResetOwnPasswordData:
    type: object
    properties:
      email:
        $ref: '#/definitions/UserEmail'
      password:
        $ref: '#/definitions/Password'
      newPassword:
        $ref: '#/definitions/Password'
    required:
      - email
      - password
      - newPassword

  ResetAuthData:
    type: object
    properties:
      resetPassword:
        $ref: '#/definitions/ResetPassword'
      resetMfa:
        $ref: '#/definitions/ResetMfa'
    required:
      - resetPassword
      - resetMfa

  ResetAuthResult:
    type: object
    properties:
      temporaryPassword:
        $ref: '#/definitions/NullableTemporaryPassword'
    required:
      - temporaryPassword

  # Actually a union
  ChangeOwnAuthData:
    type: object
    properties:
      resetPassword:
        $ref: '#/definitions/ResetPassword'
      resetMfa:
        $ref: '#/definitions/ResetMfa'
      newPassword:
        $ref: '#/definitions/Password'
    required:
      - resetPassword
      - resetMfa

  ChangeOwnAuthResponse:
    type: object
    properties:
      otpAuth:
        $ref: '#/definitions/NullableOTPAuth'
    required:
      - otpAuth

  ConfirmMfaData:
    type: object
    properties:
      otp:
        $ref: '#/definitions/OTP'
    required:
      - otp

/v1/auth/self-info:
  get:
    tags: [Auth]
    description: Retrieves information about the user that is currently logged in.
    responses:
      200:
        description: Information about the user who is logged in.
        content:
          application/json:
            schema:
              $ref: '#/definitions/AuthData'
      401:
        $ref: '#/responses/Unauthorized'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/login:
  post:
    tags: [Auth]
    description: Log in as a user.
    requestBody:
      description: The credentials for the user, currently consisting of the email and password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/LoginData'
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/responses/Unauthorized'

/v1/auth/logout:
  post:
    tags: [Auth]
    description: >
      Log out of a session, requesting the browser to remove
      its session JWT token.

      Note that this does not explicitly invalidate any existing JWT tokens
      for that user, at the moment.
    responses:
      200:
        description: The user has successfully logged out.
      401:
        $ref: '#/responses/Unauthorized'
    security:
      - cookieAuth: []

/v1/auth/reset-own-password:
  post:
    tags: [Auth]
    description: Reset own password.
    requestBody:
      description: The credentials for the user and the new password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ResetOwnPasswordData'
    responses:
      200:
        description: Password reset successfully.
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      404:
        $ref: '#/responses/NotFound'

/v1/auth/reset-auth/{userId}:
  post:
    tags: [Auth]
    description: Reset other admin's password. Only available to admins.
    parameters:
      - $ref: '#/definitions/UserId'
    requestBody:
      description: If MFA and/or password should be reset.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ResetAuthData'
    responses:
      200:
        description: Temporary password for the admin whose password was reset.
        content:
          application/json:
            schema:
              $ref: '#/definitions/ResetAuthResult'
      400:
        $ref: '#/responses/BadRequest'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
      404:
        $ref: '#/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/change-own-auth:
  post:
    tags: [Auth]
    description: Change own password / MFA when logging in.
    requestBody:
      description: What data to reset.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ChangeOwnAuthData'
    responses:
      200:
        description: Password / MFA reset successfully.
        content:
          application/json:
            schema:
              $ref: '#/definitions/ChangeOwnAuthResponse'
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
    security:
      - cookieAuth: []

/v1/auth/confirm-mfa:
  post:
    tags: [Auth]
    description: Confirm new MFA by submitting a TOTP code.
    requestBody:
      description: TOTP code.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ConfirmMfaData'
    responses:
      200:
        description: Mfa confirmed.
      401:
        $ref: '#/responses/Unauthorized'
      403:
        $ref: '#/responses/Forbidden'
    security:
      - cookieAuth: []

/v1/auth/login-idp:
  get:
    tags: [Auth]
    description: redirect to idp login page.
    responses:
      303:
        description: User redirected to idp login page.

/v1/auth/login-idp/callback:
  post:
    tags: [Auth]
    description: >
      Login or create a new user and login with given SAML assertion
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/responses/Unauthorized'

/v1/auth/saml/metadata:
  get:
    tags: [Auth]
    description: >
      A xml metadata file describing Service Provider SAML attributes
    responses:
      200:
        description: Xml read successfully.
      401:
        $ref: '#/responses/Unauthorized'
