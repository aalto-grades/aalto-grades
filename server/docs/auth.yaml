# SPDX-FileCopyrightText: 2023 The Aalto Grades Developers
#
# SPDX-License-Identifier: MIT
---
definitions:
  UserId:
    type: integer
    description: The database identifier of the user.
    format: int32
    minimum: 1
    example: 1
  SystemRole:
    type: string
    enum: [USER, ADMIN]
    description: The role of the user. Used for system level authorization.
    example: USER
  Email:
    type: string
    format: email
    description: Email address, to be used as a credential.
    example: john.doe@aalto.fi
  Name:
    type: string
    description: A personal name of the user (not a credential).'
    example: John Doe
  Password:
    type: string
    format: password
    description: Plaintext password.
    example: MySuperSecretPassword123
  AuthData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/Name'
      role:
        $ref: '#/definitions/SystemRole'
    required:
      - id
      - name
      - role
  LoginData:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
      password:
        $ref: '#/definitions/Password'
    required:
      - email
      - password
  LoginResult:
    oneOf:
      - $ref: '#/definitions/ResetPasswordFalse'
      - $ref: '#/definitions/ResetPasswordTrue'
  ResetPasswordTrue:
    type: object
    properties:
      resetPassword:
        type: boolean
        enum: [true]
        description: True if user should change their password
        example: true
    required:
      - resetPassword
  ResetPasswordFalse:
    type: object
    properties:
      resetPassword:
        type: boolean
        enum: [false]
        description: True if user should change their password
        example: false
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/Name'
      role:
        $ref: '#/definitions/SystemRole'
    required:
      - resetPassword
      - id
      - name
      - role
  ResetPasswordData:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
      password:
        $ref: '#/definitions/Password'
      newPassword:
        $ref: '#/definitions/Password'
    required:
      - email
      - password
      - newPassword
  ResetPasswordResult:
    type: object
    properties:
      temporaryPassword:
        type: string
        example: 'h0AHU7f8DzhPSpED'
    required:
      - temporaryPassword
  ChangePasswordData:
    type: object
    properties:
      newPassword:
        type: string
        example: 'MySuperSecretPassword123'
    required:
      - newPassword

/v1/auth/self-info:
  get:
    tags: [Auth]
    description: Retrieves information about the user that is currently logged in.
    responses:
      200:
        description: Information about the user who is logged in.
        content:
          application/json:
            schema:
              $ref: '#/definitions/AuthData'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/login:
  post:
    tags: [Auth]
    description: Log in as a user.
    requestBody:
      description: The credentials for the user, currently consisting of the email and password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/LoginData'
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/components/responses/Unauthorized'

/v1/auth/logout:
  post:
    tags: [Auth]
    description: >
      Log out of a session, requesting the browser to remove
      its session JWT token.

      Note that this does not explicitly invalidate any existing JWT tokens
      for that user, at the moment.
    responses:
      200:
        description: The user has successfully logged out.
      401:
        $ref: '#/components/responses/Unauthorized'
    security:
      - cookieAuth: []

/v1/auth/reset-password:
  post:
    tags: [Auth]
    description: Reset own password
    requestBody:
      description: The credentials for the user and the new password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ResetPasswordData'
    responses:
      200:
        description: Information about the user who reset their password.
        content:
          application/json:
            schema:
              $ref: '#/definitions/AuthData'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'

/v1/auth/reset-password/{userId}:
  post:
    tags: [Auth]
    description: Reset other admin's password. Only available to admins.
    parameters:
      - $ref: '#/definitions/UserId'
    responses:
      200:
        description: Temporary password for the admin whose password was reset.
        content:
          application/json:
            schema:
              $ref: '#/definitions/ResetPasswordResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/change-password:
  post:
    tags: [Auth]
    description: Change own password after logging in
    requestBody:
      description: New password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ChangePasswordData'
    responses:
      200:
        description: Password changed successfully
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
    security:
      - cookieAuth: []

/v1/auth/login-idp:
  get:
    tags: [Auth]
    description: redirect to idp login page
    responses:
      303:
        description: User redirected to idp login page

/v1/auth/login-idp/callback:
  post:
    tags: [Auth]
    description: >
      Login or create a new user and login with given SAML assertion
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/components/responses/Unauthorized'

/v1/auth/saml/metadata:
  get:
    tags: [Auth]
    description: >
      A xml metadata file describing Service Provider SAML attributes
    responses:
      200:
        description: Xml read successfully
      401:
        $ref: '#/components/responses/Unauthorized'
