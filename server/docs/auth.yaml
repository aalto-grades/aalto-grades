# SPDX-FileCopyrightText: 2023 The Aalto Grades Developers
#
# SPDX-License-Identifier: MIT
---
definitions:
  UserId:
    type: integer
    description: The database identifier of the user.
    format: int32
    minimum: 1
    example: 1
  SystemRole:
    type: string
    enum: [USER, ADMIN]
    description: The role of the user. Used for system level authorization.
    example: USER
  Email:
    type: string
    format: email
    description: Email address, to be used as a credential.
    example: john.doe@aalto.fi
  Name:
    type: string
    description: A personal name of the user (not a credential).'
    example: John Doe
  Password:
    type: string
    format: password
    description: Plaintext password.
    example: MySuperSecretPassword123

  AuthData:
    type: object
    properties:
      id:
        $ref: '#/definitions/UserId'
      name:
        $ref: '#/definitions/Name'
      role:
        $ref: '#/definitions/SystemRole'
    required:
      - id
      - name
      - role

  LoginData:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
      password:
        $ref: '#/definitions/Password'
    required:
      - email
      - password
  LoginResult:
    oneOf:
      - title: Reset Password
        type: object
        description: User should reset their password
        properties:
          status:
            type: string
            enum:
              - resetPassword
            example: resetPassword
        required:
          - status
      - title: Show MFA
        type: object
        description: The MFA qr code should be shown to the user
        properties:
          status:
            type: string
            enum:
              - showMfa
            example: showMfa
          otpAuth:
            type: string
            example: 'exampleOtpAuth'
        required:
          - status
          - otpAuth
      - title: Enter MFA
        type: object
        description: The user should enter their TOTP code
        properties:
          status:
            type: string
            enum:
              - enterMfa
            example: enterMfa
        required:
          - status
      - title: Ok
        type: object
        description: Logged in successfully
        properties:
          status:
            type: string
            enum:
              - ok
            example: ok
          id:
            $ref: '#/definitions/UserId'
          name:
            $ref: '#/definitions/Name'
          role:
            $ref: '#/definitions/SystemRole'
        required:
          - status
          - id
          - name
          - role
  ResetOwnPasswordData:
    type: object
    properties:
      email:
        $ref: '#/definitions/Email'
      password:
        $ref: '#/definitions/Password'
      newPassword:
        $ref: '#/definitions/Password'
    required:
      - email
      - password
      - newPassword

  ResetAuthData:
    type: object
    properties:
      resetPassword:
        type: boolean
        description: If user password should be reset
        example: true
      resetMfa:
        type: boolean
        description: If user MFA should be reset
        example: false
    required:
      - resetPassword
      - resetMfa
  ResetAuthResult:
    type: object
    properties:
      temporaryPassword:
        type: string
        example: 'h0AHU7f8DzhPSpED'
    required:
      - temporaryPassword

  ChangeOwnAuthData:
    oneOf:
      - title: Reset Password
        type: object
        properties:
          resetPassword:
            type: boolean
            enum:
              - true
            example: true
          resetMfa:
            type: boolean
            enum:
              - false
            example: false
          newPassword:
            $ref: '#/definitions/Password'
        required:
          - resetPassword
          - resetMfa
          - newPassword
      - title: Reset MFA
        type: object
        properties:
          resetPassword:
            type: boolean
            enum:
              - false
            example: false
          resetMfa:
            type: boolean
            enum:
              - true
            example: true
        required:
          - resetPassword
          - resetMfa
  ChangeOwnAuthResponse:
    type: object
    properties:
      otpAuth:
        type: string
        nullable: true
    required:
      - otpAuth

  ConfirmMfaData:
    type: object
    properties:
      otp:
        type: string
        nullable: false
    required:
      - otp

# Endpoints
/v1/auth/self-info:
  get:
    tags: [Auth]
    description: Retrieves information about the user that is currently logged in.
    responses:
      200:
        description: Information about the user who is logged in.
        content:
          application/json:
            schema:
              $ref: '#/definitions/AuthData'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/login:
  post:
    tags: [Auth]
    description: Log in as a user.
    requestBody:
      description: The credentials for the user, currently consisting of the email and password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/LoginData'
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/components/responses/Unauthorized'

/v1/auth/logout:
  post:
    tags: [Auth]
    description: >
      Log out of a session, requesting the browser to remove
      its session JWT token.

      Note that this does not explicitly invalidate any existing JWT tokens
      for that user, at the moment.
    responses:
      200:
        description: The user has successfully logged out.
      401:
        $ref: '#/components/responses/Unauthorized'
    security:
      - cookieAuth: []

/v1/auth/reset-own-password:
  post:
    tags: [Auth]
    description: Reset own password
    requestBody:
      description: The credentials for the user and the new password.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ResetOwnPasswordData'
    responses:
      200:
        description: Password reset successfully.
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      404:
        $ref: '#/components/responses/NotFound'

/v1/auth/reset-auth/{userId}:
  post:
    tags: [Auth]
    description: Reset other admin's password. Only available to admins.
    parameters:
      - $ref: '#/definitions/UserId'
    requestBody:
      description: If MFA and/or password should be reset.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ResetAuthData'
    responses:
      200:
        description: Temporary password for the admin whose password was reset.
        content:
          application/json:
            schema:
              $ref: '#/definitions/ResetAuthResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
    security:
      - cookieAuth: []

/v1/auth/change-own-auth:
  post:
    tags: [Auth]
    description: Change own password / MFA when logging in
    requestBody:
      description: What data to reset.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ChangeOwnAuthData'
    responses:
      200:
        description: Password / MFA reset successfully
        content:
          application/json:
            schema:
              $ref: '#/definitions/ChangeOwnAuthResponse'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
    security:
      - cookieAuth: []

/v1/auth/confirm-mfa:
  post:
    tags: [Auth]
    description: Confirm new MFA by submitting a TOTP code.
    requestBody:
      description: TOTP code.
      content:
        application/json:
          schema:
            $ref: '#/definitions/ConfirmMfaData'
    responses:
      200:
        description: Mfa confirmed
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
    security:
      - cookieAuth: []

/v1/auth/login-idp:
  get:
    tags: [Auth]
    description: redirect to idp login page
    responses:
      303:
        description: User redirected to idp login page

/v1/auth/login-idp/callback:
  post:
    tags: [Auth]
    description: >
      Login or create a new user and login with given SAML assertion
    responses:
      200:
        description: The login has succeeded, and an access token is return in a cookie.
        content:
          application/json:
            schema:
              $ref: '#/definitions/LoginResult'
        headers:
          Set-Cookie:
            description: JWT token, storing an access token to allow using the API.
            schema:
              type: string
              example: jwt=wliuerhlwieurh; Secure; HttpOnly; SameSite=None
      401:
        $ref: '#/components/responses/Unauthorized'

/v1/auth/saml/metadata:
  get:
    tags: [Auth]
    description: >
      A xml metadata file describing Service Provider SAML attributes
    responses:
      200:
        description: Xml read successfully
      401:
        $ref: '#/components/responses/Unauthorized'
