// SPDX-FileCopyrightText: 2024 The Aalto Grades Developers
//
// SPDX-License-Identifier: MIT

import axios from 'axios';
import cheerio from 'cheerio';
import fs from 'fs';
import {Plugin} from 'vite';

type Dependency = {
  name: string;
  license: string;
};

enum LicenseType {
  Free, // Declared free by the FSF
  NonFree, // Declared non-free by the FSF
  OpenSource, // No declaration from the FSF but declared open source by the OSI
  Unknown, // No declaration from the FSF and not declared open source by the OSI
}

type LicenseInfo = {
  id: string;
  url: string;
  type: LicenseType;
};

type Options = {
  webLabelsFile: string;
  dependenciesFile: string;
  licenseExceptions?: string[];
};

/**
 * Attempts to transform a license string to an identifier recognized by
 * LibreJS.
 */
function transform(license: string): string {
  const spdxToLibreJsId: {[key: string]: string | undefined} = {
    'AGPL-3.0-only': 'AGPL-3.0',
    'AGPL-3.0-or-later': 'AGPL-3.0',
    'MIT': 'Expat', // prettier-ignore
    'BSD-2-Clause-FreeBSD': 'FreeBSD',
    'FSFAP': 'GNU-All-Permissive', // prettier-ignore
    'GPL-2.0-only': 'GPL-2.0',
    'GPL-2.0-or-later': 'GPL-2.0',
    'GPL-3.0-only': 'GPL-3.0',
    'GPL-3.0-or-later': 'GPL-3.0',
    'LGPL-2.1-only': 'LGPL-2.1',
    'LGPL-2.1-or-later': 'LGPL-2.1',
    'LGPL-3.0-only': 'LGPL-3.0',
    'LGPL-3.0-or-later': 'LGPL-3.0',
  };

  return spdxToLibreJsId[license] || license;
}

async function makeLicenseList(
  licenseExceptions?: string[]
): Promise<LicenseInfo[]> {
  // Licenses recognized as free by LibreJS
  const libreJsList = (
    await axios.get<{
      [key: string]: {
        identifier: string;
        canonicalUrl: string[];
      };
    }>(
      'https://git.savannah.gnu.org/cgit/librejs.git/plain/common/license_definitions.json'
    )
  ).data;

  const libreJsInfoList: LicenseInfo[] = Object.entries(libreJsList).map(
    val => ({
      id: val[1].identifier,
      url: val[1].canonicalUrl[0],
      type: LicenseType.Free,
    })
  );

  // Full SPDX license list, contains both free and non-free licenses
  const spdxList = (
    await axios.get<{
      licenses: {
        licenseId: string;
        reference: string;
        isFsfLibre?: boolean;
        isOsiApproved: boolean;
      }[];
    }>(
      'https://raw.githubusercontent.com/spdx/license-list-data/main/json/licenses.json'
    )
  ).data;

  const spdxInfoList: LicenseInfo[] = spdxList.licenses
    .map(val => {
      const type =
        val.isFsfLibre === undefined
          ? val.isOsiApproved
            ? LicenseType.OpenSource
            : LicenseType.Unknown
          : val.isFsfLibre
            ? LicenseType.Free
            : LicenseType.NonFree;

      const exception = Boolean(licenseExceptions?.includes(val.licenseId));
      if (exception && type === LicenseType.NonFree) {
        throw new Error(
          `${val.licenseId} is declared non-free and cannot be excepted`
        );
      }

      return {
        id: transform(val.licenseId),
        url: val.reference,
        type: exception ? LicenseType.Free : type,
      };
    })
    .filter(
      spdxInfo =>
        !libreJsInfoList.find(libreJsInfo => libreJsInfo.id === spdxInfo.id)
    );

  return [...libreJsInfoList, ...spdxInfoList];
}

function findLicenseInfo(
  list: LicenseInfo[],
  dependency: Dependency
): LicenseInfo | undefined {
  return list.find(info => info.id === transform(dependency.license));
}

function validateLicense(
  dependency: Dependency,
  info: LicenseInfo | undefined
): info is LicenseInfo {
  if (!info) {
    throw new Error(
      `Dependency ${dependency.name} has an unrecognized license: ${dependency.license}`
    );
  }

  switch (info.type) {
    case LicenseType.Free:
      return true;
    case LicenseType.NonFree:
      throw new Error(
        `Dependency ${dependency.name} has a NON-FREE license: ${info.id}`
      );
    case LicenseType.OpenSource:
      throw new Error(
        `Dependency ${dependency.name} has an open source license: ${info.id}`
      );
    case LicenseType.Unknown:
      throw new Error(
        `Dependency ${dependency.name} has an unknown license: ${info.id}`
      );
  }
}

export default function libreJs({
  webLabelsFile,
  dependenciesFile,
  licenseExceptions,
}: Options): Plugin {
  return {
    name: 'librejs',
    closeBundle() {
      // Web labels HTML file
      const webLabels = cheerio.load(fs.readFileSync(webLabelsFile));

      // List of dependencies generated by Vite
      const dependencies = JSON.parse(
        fs.readFileSync(dependenciesFile).toString()
      ) as Dependency[];

      (async () => {
        const list = await makeLicenseList(licenseExceptions);

        const webLabelsList: LicenseInfo[] = [];
        for (const dependency of dependencies) {
          const info = findLicenseInfo(list, dependency);

          if (
            validateLicense(dependency, info) &&
            !webLabelsList.find(val => val.id === info.id)
          ) {
            webLabelsList.push(info);
          }
        }

        for (const info of webLabelsList) {
          webLabels(`<a href="${info.url}">${info.id}</a>\n`).appendTo(
            '#licenses'
          );
        }

        fs.writeFileSync(webLabelsFile, webLabels.html());
      })();
    },
  };
}
